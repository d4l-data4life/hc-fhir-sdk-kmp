/*
 * Copyright (c) 2021 D4L data4life gGmbH / All rights reserved.
 *
 * D4L owns all legal rights, title and interest in and to the Software Development Kit ("SDK"),
 * including any intellectual property rights that subsist in the SDK.
 *
 * The SDK and its documentation may be accessed and used for viewing/review purposes only.
 * Any usage of the SDK for other purposes, including usage for the development of
 * applications/third-party applications shall require the conclusion of a license agreement
 * between you and D4L.
 *
 * If you are interested in licensing the SDK for your own applications/third-party
 * applications and/or if youâ€™d like to contribute to the development of the SDK, please
 * contact D4L by email to help@data4life.care.
 */

package care.data4life.hl7.fhir.r4.model

import care.data4life.hl7.fhir.r4.FhirR4Parser
import care.data4life.hl7.fhir.r4.codesystem.BindingStrength
import care.data4life.hl7.fhir.r4.codesystem.ConstraintSeverity
import care.data4life.hl7.fhir.r4.codesystem.ContactPointSystem
import care.data4life.hl7.fhir.r4.codesystem.DiscriminatorType
import care.data4life.hl7.fhir.r4.codesystem.NarrativeStatus
import care.data4life.hl7.fhir.r4.codesystem.PublicationStatus
import care.data4life.hl7.fhir.r4.codesystem.SlicingRules
import care.data4life.hl7.fhir.r4.codesystem.StructureDefinitionKind
import care.data4life.hl7.fhir.r4.codesystem.TypeDerivationRule
import care.data4life.hl7.fhir.test.util.FileHelper.loadAsString
import org.junit.Test
import org.skyscreamer.jsonassert.JSONAssert
import kotlin.test.assertEquals

/**
 * StructureDefinitionTest.java
 *
 * Structural Definition
 *
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data
 * types defined in FHIR, and also for describing extensions and constraints on resources and data
 * types.
 *
 * Generated from FHIR 4.0.1-9346c8cc45)
 */
@Suppress("UNNECESSARY_SAFE_CALL")
class StructureDefinitionTest {

    val parser = FhirR4Parser()

    @Test
    fun testStructureDefinition01() {
        // Given
        val sourceJson = loadAsString("r4/structuredefinition-example-section-library.json")

        // When
        val data = parser.toFhir(StructureDefinition::class, sourceJson)

        // Then
        assertEquals(
            "True".toBoolean(),
            data.abstrakt?.value
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Composition",
            data.baseDefinition
        )
        assertEquals(
            "2018-11-05T17:57:00+11:00",
            data.date?.value.toString()
        )
        assertEquals(
            TypeDerivationRule.CONSTRAINT,
            data.derivation
        )
        assertEquals(
            "Composition",
            data.differential?.element?.get(0)?.id
        )
        assertEquals(
            "Composition",
            data.differential?.element?.get(0)?.path
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(1)?.id
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(1)?.path
        )
        assertEquals(
            "Slice by .section.code when using this library of sections",
            data.differential?.element?.get(1)?.slicing?.description
        )
        assertEquals(
            "code",
            data.differential?.element?.get(1)?.slicing?.discriminator?.get(0)?.path
        )
        assertEquals(
            DiscriminatorType.PATTERN,
            data.differential?.element?.get(1)?.slicing?.discriminator?.get(0)?.type
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(1)?.slicing?.ordered?.value
        )
        assertEquals(
            SlicingRules.CLOSED,
            data.differential?.element?.get(1)?.slicing?.rules
        )
        assertEquals(
            "Composition.section:procedure",
            data.differential?.element?.get(2)?.id
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(2)?.path
        )
        assertEquals(
            "procedure",
            data.differential?.element?.get(2)?.sliceName
        )
        assertEquals(
            "Procedures Performed",
            data.differential?.element?.get(3)?.fixedString
        )
        assertEquals(
            "Composition.section:procedure.title",
            data.differential?.element?.get(3)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(3)?.min?.value
        )
        assertEquals(
            "Composition.section.title",
            data.differential?.element?.get(3)?.path
        )
        assertEquals(
            "Composition.section:procedure.code",
            data.differential?.element?.get(4)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(4)?.min?.value
        )
        assertEquals(
            "Composition.section.code",
            data.differential?.element?.get(4)?.path
        )
        assertEquals(
            "29554-3",
            data.differential?.element?.get(4)?.patternCodeableConcept?.coding?.get(0)?.code
        )
        assertEquals(
            "Procedure Narrative",
            data.differential?.element?.get(4)?.patternCodeableConcept?.coding?.get(0)?.display
        )
        assertEquals(
            "http://loinc.org",
            data.differential?.element?.get(4)?.patternCodeableConcept?.coding?.get(0)?.system
        )
        assertEquals(
            "Composition.section:medications",
            data.differential?.element?.get(5)?.id
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(5)?.path
        )
        assertEquals(
            "medications",
            data.differential?.element?.get(5)?.sliceName
        )
        assertEquals(
            "Medications Administered",
            data.differential?.element?.get(6)?.fixedString
        )
        assertEquals(
            "Composition.section:medications.title",
            data.differential?.element?.get(6)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(6)?.min?.value
        )
        assertEquals(
            "Composition.section.title",
            data.differential?.element?.get(6)?.path
        )
        assertEquals(
            "Composition.section:medications.code",
            data.differential?.element?.get(7)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(7)?.min?.value
        )
        assertEquals(
            "Composition.section.code",
            data.differential?.element?.get(7)?.path
        )
        assertEquals(
            "29549-3",
            data.differential?.element?.get(7)?.patternCodeableConcept?.coding?.get(0)?.code
        )
        assertEquals(
            "Medication administered Narrative",
            data.differential?.element?.get(7)?.patternCodeableConcept?.coding?.get(0)?.display
        )
        assertEquals(
            "http://loinc.org",
            data.differential?.element?.get(7)?.patternCodeableConcept?.coding?.get(0)?.system
        )
        assertEquals(
            "Composition.section:plan",
            data.differential?.element?.get(8)?.id
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(8)?.path
        )
        assertEquals(
            "plan",
            data.differential?.element?.get(8)?.sliceName
        )
        assertEquals(
            "Discharge Treatment Plan",
            data.differential?.element?.get(9)?.fixedString
        )
        assertEquals(
            "Composition.section:plan.title",
            data.differential?.element?.get(9)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(9)?.min?.value
        )
        assertEquals(
            "Composition.section.title",
            data.differential?.element?.get(9)?.path
        )
        assertEquals(
            "False".toBoolean(),
            data.experimental?.value
        )
        assertEquals(
            "example-section-library",
            data.id
        )
        assertEquals(
            StructureDefinitionKind.COMPLEX_TYPE,
            data.kind
        )
        assertEquals(
            "DocumentSectionLibrary",
            data.name
        )
        assertEquals(
            PublicationStatus.ACTIVE,
            data.status
        )
        assertEquals(
            NarrativeStatus.GENERATED,
            data.text?.status
        )
        assertEquals(
            "Document Section Library (For testing section templates)",
            data.title
        )
        assertEquals(
            "Composition",
            data.type
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/example-section-library",
            data.url
        )

        // When generating JSON from model
        val json = parser.fromFhir(data)

        // Then JSON needs to match original JSON file
        JSONAssert.assertEquals(sourceJson, json, true)
    }

    @Test
    fun testStructureDefinition02() {
        // Given
        val sourceJson = loadAsString("r4/examplescenario.profile.json")

        // When
        val data = parser.toFhir(StructureDefinition::class, sourceJson)

        // Then
        assertEquals(
            "False".toBoolean(),
            data.abstrakt?.value
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.baseDefinition
        )
        assertEquals(
            ContactPointSystem.URL,
            data.contact?.get(0)?.telecom?.get(0)?.system
        )
        assertEquals(
            "http://hl7.org/fhir",
            data.contact?.get(0)?.telecom?.get(0)?.value
        )
        assertEquals(
            ContactPointSystem.URL,
            data.contact?.get(1)?.telecom?.get(0)?.system
        )
        assertEquals(
            "http://www.hl7.org/Special/committees/fiwg/index.cfm",
            data.contact?.get(1)?.telecom?.get(0)?.value
        )
        assertEquals(
            "2019-11-01T09:29:23+11:00",
            data.date?.value.toString()
        )
        assertEquals(
            TypeDerivationRule.SPECIALIZATION,
            data.derivation
        )
        assertEquals(
            "Example of workflow instance.",
            data.description
        )
        assertEquals(
            "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')",
            data.differential?.element?.get(0)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "Name should be usable as an identifier for the module by machine processing applications such as code generation",
            data.differential?.element?.get(0)?.constraint?.get(0)?.human
        )
        assertEquals(
            "esc-0",
            data.differential?.element?.get(0)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.WARNING,
            data.differential?.element?.get(0)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "not(exists(f:name/@value)) or matches(f:name/@value, '[A-Z]([A-Za-z0-9_]){0,254}')",
            data.differential?.element?.get(0)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "Example of workflow instance.",
            data.differential?.element?.get(0)?.definition
        )
        assertEquals(
            "ExampleScenario",
            data.differential?.element?.get(0)?.id
        )
        assertEquals(
            "*",
            data.differential?.element?.get(0)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(0)?.min?.value
        )
        assertEquals(
            "ExampleScenario",
            data.differential?.element?.get(0)?.path
        )
        assertEquals(
            "Example of workflow instance",
            data.differential?.element?.get(0)?.short
        )
        assertEquals(
            "ExampleScenario.url",
            data.differential?.element?.get(1)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(1)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(1)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.url",
            data.differential?.element?.get(1)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(1)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.identifier",
            data.differential?.element?.get(1)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(1)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(1)?.min?.value
        )
        assertEquals(
            "ExampleScenario.url",
            data.differential?.element?.get(1)?.path
        )
        assertEquals(
            "Allows the example scenario to be referenced by a single globally unique identifier.",
            data.differential?.element?.get(1)?.requirements
        )
        assertEquals(
            "Canonical identifier for this example scenario, represented as a URI (globally unique)",
            data.differential?.element?.get(1)?.short
        )
        assertEquals(
            "uri",
            data.differential?.element?.get(1)?.type?.get(0)?.code
        )
        assertEquals(
            "A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.",
            data.differential?.element?.get(2)?.definition
        )
        assertEquals(
            "ExampleScenario.identifier",
            data.differential?.element?.get(2)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(2)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(2)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.identifier",
            data.differential?.element?.get(2)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(2)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.identifier",
            data.differential?.element?.get(2)?.mapping?.get(1)?.map
        )
        assertEquals(
            "objimpl",
            data.differential?.element?.get(2)?.mapping?.get(2)?.identity
        )
        assertEquals(
            "no-gen-base",
            data.differential?.element?.get(2)?.mapping?.get(2)?.map
        )
        assertEquals(
            "*",
            data.differential?.element?.get(2)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(2)?.min?.value
        )
        assertEquals(
            "ExampleScenario.identifier",
            data.differential?.element?.get(2)?.path
        )
        assertEquals(
            "Allows externally provided and/or usable business identifiers to be easily associated with the module.",
            data.differential?.element?.get(2)?.requirements
        )
        assertEquals(
            "Additional identifier for the example scenario",
            data.differential?.element?.get(2)?.short
        )
        assertEquals(
            "Identifier",
            data.differential?.element?.get(2)?.type?.get(0)?.code
        )
        assertEquals(
            "ExampleScenario.version",
            data.differential?.element?.get(3)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(3)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(3)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.version",
            data.differential?.element?.get(3)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(3)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.version",
            data.differential?.element?.get(3)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(3)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(3)?.min?.value
        )
        assertEquals(
            "ExampleScenario.version",
            data.differential?.element?.get(3)?.path
        )
        assertEquals(
            "Business version of the example scenario",
            data.differential?.element?.get(3)?.short
        )
        assertEquals(
            "string",
            data.differential?.element?.get(3)?.type?.get(0)?.code
        )
        assertEquals(
            "The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.",
            data.differential?.element?.get(4)?.comment
        )
        assertEquals(
            "inv-0",
            data.differential?.element?.get(4)?.condition?.get(0)
        )
        assertEquals(
            "A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
            data.differential?.element?.get(4)?.definition
        )
        assertEquals(
            "ExampleScenario.name",
            data.differential?.element?.get(4)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(4)?.isSummary?.value
        )
        assertEquals(
            "1",
            data.differential?.element?.get(4)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(4)?.min?.value
        )
        assertEquals(
            "ExampleScenario.name",
            data.differential?.element?.get(4)?.path
        )
        assertEquals(
            "Support human navigation and code generation.",
            data.differential?.element?.get(4)?.requirements
        )
        assertEquals(
            "Name for this example scenario (computer friendly)",
            data.differential?.element?.get(4)?.short
        )
        assertEquals(
            "string",
            data.differential?.element?.get(4)?.type?.get(0)?.code
        )
        assertEquals(
            "The lifecycle status of an artifact.",
            data.differential?.element?.get(5)?.binding?.description
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-bindingName",
            data.differential?.element?.get(5)?.binding?.extension?.get(0)?.url
        )
        assertEquals(
            "PublicationStatus",
            data.differential?.element?.get(5)?.binding?.extension?.get(0)?.valueString
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-isCommonBinding",
            data.differential?.element?.get(5)?.binding?.extension?.get(1)?.url
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(5)?.binding?.extension?.get(1)?.valueBoolean?.value
        )
        assertEquals(
            BindingStrength.REQUIRED,
            data.differential?.element?.get(5)?.binding?.strength
        )
        assertEquals(
            "http://hl7.org/fhir/ValueSet/publication-status|4.0.1",
            data.differential?.element?.get(5)?.binding?.valueSet
        )
        assertEquals(
            "Allows filtering of example scenarios that are appropriate for use versus not.",
            data.differential?.element?.get(5)?.comment
        )
        assertEquals(
            "The status of this example scenario. Enables tracking the life-cycle of the content.",
            data.differential?.element?.get(5)?.definition
        )
        assertEquals(
            "ExampleScenario.status",
            data.differential?.element?.get(5)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(5)?.isModifier?.value
        )
        assertEquals(
            "This is labeled as \"Is Modifier\" because applications should not use a retired {{title}} without due consideration",
            data.differential?.element?.get(5)?.isModifierReason
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(5)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(5)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.status",
            data.differential?.element?.get(5)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(5)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.status",
            data.differential?.element?.get(5)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(5)?.max
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(5)?.min?.value
        )
        assertEquals(
            "ExampleScenario.status",
            data.differential?.element?.get(5)?.path
        )
        assertEquals(
            "draft | active | retired | unknown",
            data.differential?.element?.get(5)?.short
        )
        assertEquals(
            "code",
            data.differential?.element?.get(5)?.type?.get(0)?.code
        )
        assertEquals(
            "Allows filtering of example scenarios that are appropriate for use versus not.",
            data.differential?.element?.get(6)?.comment
        )
        assertEquals(
            "A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
            data.differential?.element?.get(6)?.definition
        )
        assertEquals(
            "ExampleScenario.experimental",
            data.differential?.element?.get(6)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(6)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(6)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.experimental",
            data.differential?.element?.get(6)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(6)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.class",
            data.differential?.element?.get(6)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(6)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(6)?.min?.value
        )
        assertEquals(
            "ExampleScenario.experimental",
            data.differential?.element?.get(6)?.path
        )
        assertEquals(
            "Enables experimental content to be developed following the same lifecycle that would be used for a production-level example scenario.",
            data.differential?.element?.get(6)?.requirements
        )
        assertEquals(
            "For testing purposes, not real usage",
            data.differential?.element?.get(6)?.short
        )
        assertEquals(
            "boolean",
            data.differential?.element?.get(6)?.type?.get(0)?.code
        )
        assertEquals(
            "Revision Date",
            data.differential?.element?.get(7)?.alias?.get(0)
        )
        assertEquals(
            "ExampleScenario.date",
            data.differential?.element?.get(7)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(7)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(7)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.date",
            data.differential?.element?.get(7)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(7)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.recorded",
            data.differential?.element?.get(7)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(7)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(7)?.min?.value
        )
        assertEquals(
            "ExampleScenario.date",
            data.differential?.element?.get(7)?.path
        )
        assertEquals(
            "Date last changed",
            data.differential?.element?.get(7)?.short
        )
        assertEquals(
            "dateTime",
            data.differential?.element?.get(7)?.type?.get(0)?.code
        )
        assertEquals(
            "The name of the organization or individual that published the example scenario.",
            data.differential?.element?.get(8)?.definition
        )
        assertEquals(
            "ExampleScenario.publisher",
            data.differential?.element?.get(8)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(8)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(8)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.publisher",
            data.differential?.element?.get(8)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.differential?.element?.get(8)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.witness",
            data.differential?.element?.get(8)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.differential?.element?.get(8)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(8)?.min?.value
        )
        assertEquals(
            "ExampleScenario.publisher",
            data.differential?.element?.get(8)?.path
        )
        assertEquals(
            "Helps establish the \"authority/credibility\" of the example scenario.  May also allow for contact.",
            data.differential?.element?.get(8)?.requirements
        )
        assertEquals(
            "Name of the publisher (organization or individual)",
            data.differential?.element?.get(8)?.short
        )
        assertEquals(
            "string",
            data.differential?.element?.get(8)?.type?.get(0)?.code
        )
        assertEquals(
            "May be a web site, an email address, a telephone number, etc.",
            data.differential?.element?.get(9)?.comment
        )
        assertEquals(
            "Contact details to assist a user in finding and communicating with the publisher.",
            data.differential?.element?.get(9)?.definition
        )
        assertEquals(
            "ExampleScenario.contact",
            data.differential?.element?.get(9)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(9)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.differential?.element?.get(9)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.contact",
            data.differential?.element?.get(9)?.mapping?.get(0)?.map
        )
        assertEquals(
            "*",
            data.differential?.element?.get(9)?.max
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(9)?.min?.value
        )
        assertEquals(
            "ExampleScenario.contact",
            data.differential?.element?.get(9)?.path
        )
        assertEquals(
            "Contact details for the publisher",
            data.differential?.element?.get(9)?.short
        )
        assertEquals(
            "ContactDetail",
            data.differential?.element?.get(9)?.type?.get(0)?.code
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-category",
            data.extension?.get(0)?.url
        )
        assertEquals(
            "Foundation.Conformance",
            data.extension?.get(0)?.valueString
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status",
            data.extension?.get(1)?.url
        )
        assertEquals(
            "trial-use",
            data.extension?.get(1)?.valueCode
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm",
            data.extension?.get(2)?.url
        )
        assertEquals(
            "0".toInt(),
            data.extension?.get(2)?.valueInteger?.value
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-security-category",
            data.extension?.get(3)?.url
        )
        assertEquals(
            "anonymous",
            data.extension?.get(3)?.valueCode
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg",
            data.extension?.get(4)?.url
        )
        assertEquals(
            "fhir",
            data.extension?.get(4)?.valueCode
        )
        assertEquals(
            "4.0.1",
            data.fhirVer
        )
        assertEquals(
            "ExampleScenario",
            data.id
        )
        assertEquals(
            StructureDefinitionKind.RESOURCE,
            data.kind
        )
        assertEquals(
            "workflow",
            data.mapping?.get(0)?.identity
        )
        assertEquals(
            "Workflow Pattern",
            data.mapping?.get(0)?.name
        )
        assertEquals(
            "http://hl7.org/fhir/workflow",
            data.mapping?.get(0)?.uri
        )
        assertEquals(
            "w5",
            data.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs Pattern Mapping",
            data.mapping?.get(1)?.name
        )
        assertEquals(
            "http://hl7.org/fhir/fivews",
            data.mapping?.get(1)?.uri
        )
        assertEquals(
            "objimpl",
            data.mapping?.get(2)?.identity
        )
        assertEquals(
            "Object Implementation Information",
            data.mapping?.get(2)?.name
        )
        assertEquals(
            "http://hl7.org/fhir/object-implementation",
            data.mapping?.get(2)?.uri
        )
        assertEquals(
            "rim",
            data.mapping?.get(3)?.identity
        )
        assertEquals(
            "RIM Mapping",
            data.mapping?.get(3)?.name
        )
        assertEquals(
            "http://hl7.org/v3",
            data.mapping?.get(3)?.uri
        )
        assertEquals(
            "2019-11-01T09:29:23.356+11:00",
            data.meta?.lastUpdated?.value.toString()
        )
        assertEquals(
            "ExampleScenario",
            data.name
        )
        assertEquals(
            "Health Level Seven International (FHIR Infrastructure)",
            data.publisher
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(0)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(0)?.base?.min?.value
        )
        assertEquals(
            "ExampleScenario",
            data.snapshot?.element?.get(0)?.base?.path
        )
        assertEquals(
            "contained.contained.empty()",
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.human
        )
        assertEquals(
            "dom-2",
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.source
        )
        assertEquals(
            "not(parent::f:contained and f:contained)",
            data.snapshot?.element?.get(0)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            data.snapshot?.element?.get(0)?.constraint?.get(1)?.human
        )
        assertEquals(
            "dom-3",
            data.snapshot?.element?.get(0)?.constraint?.get(1)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(0)?.constraint?.get(1)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.snapshot?.element?.get(0)?.constraint?.get(1)?.source
        )
        assertEquals(
            "not(exists(for \$id in f:contained/*/f:id/@value return \$contained[not(parent::*/descendant::f:reference/@value=concat('#', \$contained/*/id/@value) or descendant::f:reference[@value='#'])]))",
            data.snapshot?.element?.get(0)?.constraint?.get(1)?.xpath
        )
        assertEquals(
            "contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.expression
        )
        assertEquals(
            "If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.human
        )
        assertEquals(
            "dom-4",
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.source
        )
        assertEquals(
            "not(exists(f:contained/*/f:meta/f:versionId)) and not(exists(f:contained/*/f:meta/f:lastUpdated))",
            data.snapshot?.element?.get(0)?.constraint?.get(2)?.xpath
        )
        assertEquals(
            "contained.meta.security.empty()",
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.expression
        )
        assertEquals(
            "If a resource is contained in another resource, it SHALL NOT have a security label",
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.human
        )
        assertEquals(
            "dom-5",
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.source
        )
        assertEquals(
            "not(exists(f:contained/*/f:meta/f:security))",
            data.snapshot?.element?.get(0)?.constraint?.get(3)?.xpath
        )
        assertEquals(
            "text.`div`.exists()",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.expression
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.extension?.get(0)?.url
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.extension?.get(0)?.valueBoolean?.value
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice-explanation",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.extension?.get(1)?.url
        )
        assertEquals(
            "A resource should have narrative for robust management",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.human
        )
        assertEquals(
            "dom-6",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.key
        )
        assertEquals(
            ConstraintSeverity.WARNING,
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/DomainResource",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.source
        )
        assertEquals(
            "exists(f:text/h:div)",
            data.snapshot?.element?.get(0)?.constraint?.get(4)?.xpath
        )
        assertEquals(
            "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')",
            data.snapshot?.element?.get(0)?.constraint?.get(5)?.expression
        )
        assertEquals(
            "Name should be usable as an identifier for the module by machine processing applications such as code generation",
            data.snapshot?.element?.get(0)?.constraint?.get(5)?.human
        )
        assertEquals(
            "esc-0",
            data.snapshot?.element?.get(0)?.constraint?.get(5)?.key
        )
        assertEquals(
            ConstraintSeverity.WARNING,
            data.snapshot?.element?.get(0)?.constraint?.get(5)?.severity
        )
        assertEquals(
            "not(exists(f:name/@value)) or matches(f:name/@value, '[A-Z]([A-Za-z0-9_]){0,254}')",
            data.snapshot?.element?.get(0)?.constraint?.get(5)?.xpath
        )
        assertEquals(
            "Example of workflow instance.",
            data.snapshot?.element?.get(0)?.definition
        )
        assertEquals(
            "ExampleScenario",
            data.snapshot?.element?.get(0)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(0)?.isModifier?.value
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(0)?.isSummary?.value
        )
        assertEquals(
            "rim",
            data.snapshot?.element?.get(0)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Entity. Role, or Act",
            data.snapshot?.element?.get(0)?.mapping?.get(0)?.map
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(0)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(0)?.min?.value
        )
        assertEquals(
            "ExampleScenario",
            data.snapshot?.element?.get(0)?.path
        )
        assertEquals(
            "Example of workflow instance",
            data.snapshot?.element?.get(0)?.short
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(1)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(1)?.base?.min?.value
        )
        assertEquals(
            "Resource.id",
            data.snapshot?.element?.get(1)?.base?.path
        )
        assertEquals(
            "The only time that a resource does not have an id is when it is being submitted to the server using a create operation.",
            data.snapshot?.element?.get(1)?.comment
        )
        assertEquals(
            "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
            data.snapshot?.element?.get(1)?.definition
        )
        assertEquals(
            "ExampleScenario.id",
            data.snapshot?.element?.get(1)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(1)?.isModifier?.value
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(1)?.isSummary?.value
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(1)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(1)?.min?.value
        )
        assertEquals(
            "ExampleScenario.id",
            data.snapshot?.element?.get(1)?.path
        )
        assertEquals(
            "Logical id of this artifact",
            data.snapshot?.element?.get(1)?.short
        )
        assertEquals(
            "http://hl7.org/fhirpath/System.String",
            data.snapshot?.element?.get(1)?.type?.get(0)?.code
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
            data.snapshot?.element?.get(1)?.type?.get(0)?.extension?.get(0)?.url
        )
        assertEquals(
            "string",
            data.snapshot?.element?.get(1)?.type?.get(0)?.extension?.get(0)?.valueUrl
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(2)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(2)?.base?.min?.value
        )
        assertEquals(
            "Resource.meta",
            data.snapshot?.element?.get(2)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(2)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
            data.snapshot?.element?.get(2)?.definition
        )
        assertEquals(
            "ExampleScenario.meta",
            data.snapshot?.element?.get(2)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(2)?.isModifier?.value
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(2)?.isSummary?.value
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(2)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(2)?.min?.value
        )
        assertEquals(
            "ExampleScenario.meta",
            data.snapshot?.element?.get(2)?.path
        )
        assertEquals(
            "Metadata about the resource",
            data.snapshot?.element?.get(2)?.short
        )
        assertEquals(
            "Meta",
            data.snapshot?.element?.get(2)?.type?.get(0)?.code
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(3)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(3)?.base?.min?.value
        )
        assertEquals(
            "Resource.implicitRules",
            data.snapshot?.element?.get(3)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(3)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "ExampleScenario.implicitRules",
            data.snapshot?.element?.get(3)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(3)?.isModifier?.value
        )
        assertEquals(
            "This element is labeled as a modifier because the implicit rules may provide additional knowledge about the resource that modifies it's meaning or interpretation",
            data.snapshot?.element?.get(3)?.isModifierReason
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(3)?.isSummary?.value
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(3)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(3)?.min?.value
        )
        assertEquals(
            "ExampleScenario.implicitRules",
            data.snapshot?.element?.get(3)?.path
        )
        assertEquals(
            "A set of rules under which this content was created",
            data.snapshot?.element?.get(3)?.short
        )
        assertEquals(
            "uri",
            data.snapshot?.element?.get(3)?.type?.get(0)?.code
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(4)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(4)?.base?.min?.value
        )
        assertEquals(
            "Resource.language",
            data.snapshot?.element?.get(4)?.base?.path
        )
        assertEquals(
            "A human language.",
            data.snapshot?.element?.get(4)?.binding?.description
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-maxValueSet",
            data.snapshot?.element?.get(4)?.binding?.extension?.get(0)?.url
        )
        assertEquals(
            "http://hl7.org/fhir/ValueSet/all-languages",
            data.snapshot?.element?.get(4)?.binding?.extension?.get(0)?.valueCanonical
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-bindingName",
            data.snapshot?.element?.get(4)?.binding?.extension?.get(1)?.url
        )
        assertEquals(
            "Language",
            data.snapshot?.element?.get(4)?.binding?.extension?.get(1)?.valueString
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/elementdefinition-isCommonBinding",
            data.snapshot?.element?.get(4)?.binding?.extension?.get(2)?.url
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(4)?.binding?.extension?.get(2)?.valueBoolean?.value
        )
        assertEquals(
            BindingStrength.PREFERRED,
            data.snapshot?.element?.get(4)?.binding?.strength
        )
        assertEquals(
            "http://hl7.org/fhir/ValueSet/languages",
            data.snapshot?.element?.get(4)?.binding?.valueSet
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(4)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "The base language in which the resource is written.",
            data.snapshot?.element?.get(4)?.definition
        )
        assertEquals(
            "ExampleScenario.language",
            data.snapshot?.element?.get(4)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(4)?.isModifier?.value
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(4)?.isSummary?.value
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(4)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(4)?.min?.value
        )
        assertEquals(
            "ExampleScenario.language",
            data.snapshot?.element?.get(4)?.path
        )
        assertEquals(
            "Language of the resource content",
            data.snapshot?.element?.get(4)?.short
        )
        assertEquals(
            "code",
            data.snapshot?.element?.get(4)?.type?.get(0)?.code
        )
        assertEquals(
            "narrative",
            data.snapshot?.element?.get(5)?.alias?.get(0)
        )
        assertEquals(
            "html",
            data.snapshot?.element?.get(5)?.alias?.get(1)
        )
        assertEquals(
            "xhtml",
            data.snapshot?.element?.get(5)?.alias?.get(2)
        )
        assertEquals(
            "display",
            data.snapshot?.element?.get(5)?.alias?.get(3)
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(5)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(5)?.base?.min?.value
        )
        assertEquals(
            "DomainResource.text",
            data.snapshot?.element?.get(5)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(5)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "ExampleScenario.text",
            data.snapshot?.element?.get(5)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(5)?.isModifier?.value
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(5)?.isSummary?.value
        )
        assertEquals(
            "rim",
            data.snapshot?.element?.get(5)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Act.text?",
            data.snapshot?.element?.get(5)?.mapping?.get(0)?.map
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(5)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(5)?.min?.value
        )
        assertEquals(
            "ExampleScenario.text",
            data.snapshot?.element?.get(5)?.path
        )
        assertEquals(
            "Text summary of the resource, for human interpretation",
            data.snapshot?.element?.get(5)?.short
        )
        assertEquals(
            "Narrative",
            data.snapshot?.element?.get(5)?.type?.get(0)?.code
        )
        assertEquals(
            "inline resources",
            data.snapshot?.element?.get(6)?.alias?.get(0)
        )
        assertEquals(
            "anonymous resources",
            data.snapshot?.element?.get(6)?.alias?.get(1)
        )
        assertEquals(
            "contained resources",
            data.snapshot?.element?.get(6)?.alias?.get(2)
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(6)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(6)?.base?.min?.value
        )
        assertEquals(
            "DomainResource.contained",
            data.snapshot?.element?.get(6)?.base?.path
        )
        assertEquals(
            "ExampleScenario.contained",
            data.snapshot?.element?.get(6)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(6)?.isModifier?.value
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(6)?.isSummary?.value
        )
        assertEquals(
            "rim",
            data.snapshot?.element?.get(6)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "N/A",
            data.snapshot?.element?.get(6)?.mapping?.get(0)?.map
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(6)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(6)?.min?.value
        )
        assertEquals(
            "ExampleScenario.contained",
            data.snapshot?.element?.get(6)?.path
        )
        assertEquals(
            "Contained, inline Resources",
            data.snapshot?.element?.get(6)?.short
        )
        assertEquals(
            "Resource",
            data.snapshot?.element?.get(6)?.type?.get(0)?.code
        )
        assertEquals(
            "extensions",
            data.snapshot?.element?.get(7)?.alias?.get(0)
        )
        assertEquals(
            "user content",
            data.snapshot?.element?.get(7)?.alias?.get(1)
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(7)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(7)?.base?.min?.value
        )
        assertEquals(
            "DomainResource.extension",
            data.snapshot?.element?.get(7)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(7)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "extension.exists() != value.exists()",
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.expression
        )
        assertEquals(
            "Must have either extensions or value[x], not both",
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.human
        )
        assertEquals(
            "ext-1",
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Extension",
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.source
        )
        assertEquals(
            "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            data.snapshot?.element?.get(7)?.constraint?.get(1)?.xpath
        )
        assertEquals(
            "ExampleScenario.extension",
            data.snapshot?.element?.get(7)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(7)?.isModifier?.value
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(7)?.isSummary?.value
        )
        assertEquals(
            "rim",
            data.snapshot?.element?.get(7)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "N/A",
            data.snapshot?.element?.get(7)?.mapping?.get(0)?.map
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(7)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(7)?.min?.value
        )
        assertEquals(
            "ExampleScenario.extension",
            data.snapshot?.element?.get(7)?.path
        )
        assertEquals(
            "Additional content defined by implementations",
            data.snapshot?.element?.get(7)?.short
        )
        assertEquals(
            "Extension",
            data.snapshot?.element?.get(7)?.type?.get(0)?.code
        )
        assertEquals(
            "extensions",
            data.snapshot?.element?.get(8)?.alias?.get(0)
        )
        assertEquals(
            "user content",
            data.snapshot?.element?.get(8)?.alias?.get(1)
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(8)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(8)?.base?.min?.value
        )
        assertEquals(
            "DomainResource.modifierExtension",
            data.snapshot?.element?.get(8)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(8)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "extension.exists() != value.exists()",
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.expression
        )
        assertEquals(
            "Must have either extensions or value[x], not both",
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.human
        )
        assertEquals(
            "ext-1",
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Extension",
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.source
        )
        assertEquals(
            "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            data.snapshot?.element?.get(8)?.constraint?.get(1)?.xpath
        )
        assertEquals(
            "ExampleScenario.modifierExtension",
            data.snapshot?.element?.get(8)?.id
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(8)?.isModifier?.value
        )
        assertEquals(
            "Modifier extensions are expected to modify the meaning or interpretation of the resource that contains them",
            data.snapshot?.element?.get(8)?.isModifierReason
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(8)?.isSummary?.value
        )
        assertEquals(
            "rim",
            data.snapshot?.element?.get(8)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "N/A",
            data.snapshot?.element?.get(8)?.mapping?.get(0)?.map
        )
        assertEquals(
            "*",
            data.snapshot?.element?.get(8)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(8)?.min?.value
        )
        assertEquals(
            "ExampleScenario.modifierExtension",
            data.snapshot?.element?.get(8)?.path
        )
        assertEquals(
            "Extensions that cannot be ignored",
            data.snapshot?.element?.get(8)?.short
        )
        assertEquals(
            "Extension",
            data.snapshot?.element?.get(8)?.type?.get(0)?.code
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(9)?.base?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(9)?.base?.min?.value
        )
        assertEquals(
            "ExampleScenario.url",
            data.snapshot?.element?.get(9)?.base?.path
        )
        assertEquals(
            "hasValue() or (children().count() > id.count())",
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.expression
        )
        assertEquals(
            "All FHIR elements must have a @value or children",
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.human
        )
        assertEquals(
            "ele-1",
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.key
        )
        assertEquals(
            ConstraintSeverity.ERROR,
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.severity
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Element",
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.source
        )
        assertEquals(
            "@value|f:*|h:div",
            data.snapshot?.element?.get(9)?.constraint?.get(0)?.xpath
        )
        assertEquals(
            "ExampleScenario.url",
            data.snapshot?.element?.get(9)?.id
        )
        assertEquals(
            "False".toBoolean(),
            data.snapshot?.element?.get(9)?.isModifier?.value
        )
        assertEquals(
            "True".toBoolean(),
            data.snapshot?.element?.get(9)?.isSummary?.value
        )
        assertEquals(
            "workflow",
            data.snapshot?.element?.get(9)?.mapping?.get(0)?.identity
        )
        assertEquals(
            "Definition.url",
            data.snapshot?.element?.get(9)?.mapping?.get(0)?.map
        )
        assertEquals(
            "w5",
            data.snapshot?.element?.get(9)?.mapping?.get(1)?.identity
        )
        assertEquals(
            "FiveWs.identifier",
            data.snapshot?.element?.get(9)?.mapping?.get(1)?.map
        )
        assertEquals(
            "1",
            data.snapshot?.element?.get(9)?.max
        )
        assertEquals(
            "0".toLong(),
            data.snapshot?.element?.get(9)?.min?.value
        )
        assertEquals(
            "ExampleScenario.url",
            data.snapshot?.element?.get(9)?.path
        )
        assertEquals(
            "Allows the example scenario to be referenced by a single globally unique identifier.",
            data.snapshot?.element?.get(9)?.requirements
        )
        assertEquals(
            "Canonical identifier for this example scenario, represented as a URI (globally unique)",
            data.snapshot?.element?.get(9)?.short
        )
        assertEquals(
            "uri",
            data.snapshot?.element?.get(9)?.type?.get(0)?.code
        )
        assertEquals(
            PublicationStatus.DRAFT,
            data.status
        )
        assertEquals(
            NarrativeStatus.GENERATED,
            data.text?.status
        )
        assertEquals(
            "ExampleScenario",
            data.type
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
            data.url
        )
        assertEquals(
            "4.0.1",
            data.version
        )

        // When generating JSON from model
        val json = parser.fromFhir(data)

        // Then JSON needs to match original JSON file
        JSONAssert.assertEquals(sourceJson, json, true)
    }

    @Test
    fun testStructureDefinition03() {
        // Given
        val sourceJson = loadAsString("r4/structuredefinition-example-composition.json")

        // When
        val data = parser.toFhir(StructureDefinition::class, sourceJson)

        // Then
        assertEquals(
            "False".toBoolean(),
            data.abstrakt?.value
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/Composition",
            data.baseDefinition
        )
        assertEquals(
            "2018-11-05T17:47:00+11:00",
            data.date?.value.toString()
        )
        assertEquals(
            TypeDerivationRule.CONSTRAINT,
            data.derivation
        )
        assertEquals(
            "Composition",
            data.differential?.element?.get(0)?.id
        )
        assertEquals(
            "Composition",
            data.differential?.element?.get(0)?.path
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(1)?.id
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(1)?.path
        )
        assertEquals(
            "Slice by .section.code",
            data.differential?.element?.get(1)?.slicing?.description
        )
        assertEquals(
            "code",
            data.differential?.element?.get(1)?.slicing?.discriminator?.get(0)?.path
        )
        assertEquals(
            DiscriminatorType.PATTERN,
            data.differential?.element?.get(1)?.slicing?.discriminator?.get(0)?.type
        )
        assertEquals(
            "True".toBoolean(),
            data.differential?.element?.get(1)?.slicing?.ordered?.value
        )
        assertEquals(
            SlicingRules.CLOSED,
            data.differential?.element?.get(1)?.slicing?.rules
        )
        assertEquals(
            "Composition.section:procedure",
            data.differential?.element?.get(2)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(2)?.min?.value
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(2)?.path
        )
        assertEquals(
            "procedure",
            data.differential?.element?.get(2)?.sliceName
        )
        assertEquals(
            "BackboneElement",
            data.differential?.element?.get(2)?.type?.get(0)?.code
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/document-section-library",
            data.differential?.element?.get(2)?.type?.get(0)?.profile?.get(0)
        )
        assertEquals(
            "Composition.section:medications",
            data.differential?.element?.get(3)?.id
        )
        assertEquals(
            "1".toLong(),
            data.differential?.element?.get(3)?.min?.value
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(3)?.path
        )
        assertEquals(
            "medications",
            data.differential?.element?.get(3)?.sliceName
        )
        assertEquals(
            "BackboneElement",
            data.differential?.element?.get(3)?.type?.get(0)?.code
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/document-section-library",
            data.differential?.element?.get(3)?.type?.get(0)?.profile?.get(0)
        )
        assertEquals(
            "Composition.section:plan",
            data.differential?.element?.get(4)?.id
        )
        assertEquals(
            "0".toLong(),
            data.differential?.element?.get(4)?.min?.value
        )
        assertEquals(
            "Composition.section",
            data.differential?.element?.get(4)?.path
        )
        assertEquals(
            "plan",
            data.differential?.element?.get(4)?.sliceName
        )
        assertEquals(
            "BackboneElement",
            data.differential?.element?.get(4)?.type?.get(0)?.code
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/document-section-library",
            data.differential?.element?.get(4)?.type?.get(0)?.profile?.get(0)
        )
        assertEquals(
            "False".toBoolean(),
            data.experimental?.value
        )
        assertEquals(
            "example-composition",
            data.id
        )
        assertEquals(
            StructureDefinitionKind.COMPLEX_TYPE,
            data.kind
        )
        assertEquals(
            "DocumentStructure",
            data.name
        )
        assertEquals(
            PublicationStatus.ACTIVE,
            data.status
        )
        assertEquals(
            NarrativeStatus.GENERATED,
            data.text?.status
        )
        assertEquals(
            "Document Structure (For testing section templates)",
            data.title
        )
        assertEquals(
            "Composition",
            data.type
        )
        assertEquals(
            "http://hl7.org/fhir/StructureDefinition/example-composition",
            data.url
        )

        // When generating JSON from model
        val json = parser.fromFhir(data)

        // Then JSON needs to match original JSON file
        JSONAssert.assertEquals(sourceJson, json, true)
    }
}
